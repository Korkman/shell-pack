#! /bin/bash
{

# quick qemu demoboot
# test boot in a qemu instance (disks snapshotted, no network)
# ~pbeck 2020

set -eu
set -o pipefail

if [ "${KEYBOARD:-""}" != "" ]
then
	if [ "${KEYBOARD:-""}" != "unset" ]
	then
		kbd=$KEYBOARD
		keyboard="-k $KEYBOARD"
	else
		kbd=""
		keyboard=""
	fi
else
	# guess keyboard layout
	# NOTE: using a bad hack when localectl is unavailable.
	# either way, it is not guaranteed the layout is available in qemu.
	kbd=$(localectl status | grep "X11 Layout" | awk '{print $3}') \
	|| kbd=$(locale | grep LANG= | sed 's/.*=//;s/_.*//') \
	|| kbd="de" \
	;
	keyboard="-k $kbd"
fi

if [ "${1:-""}" == "" ]; then
	echo "Usage: qqemu DISK [DISK...]"
	echo " - Starts qemu with a copy-on-write snapshotted version of DISK"
	echo "   (or multiple of them, mind you more than 4 require virtio-blk-pci, see below)"
	echo " - Provides VNC screen access on port 127.0.0.1:5907"
	echo "   (or GTK interface if DISPLAY is set)"
	echo " - Machine starts suspended until you type 'c' to continue boot"
	echo " - Useful to debug Bootloader problems"
	echo " - 'commit drive-diskX' will persist changes to the named disk, 'all' for all"
	echo
	echo "Environment variables and their defaults:"
	echo " KVM=yes                   # 'no' disables hw virtualization"
	echo " KEYBOARD=(guessed)        # keyboard layout ($kbd)"
	echo " MEMORY=1024"
	echo " CPU=(half of host CPU)    # override the default cpu core count"
	echo " NET=no                    # 'yes' enables NAT network, MAC cloned from host to virtual e1000"
	echo " BIOS=legacy               # change to 'uefi' when required"
	echo " VNC_DISPLAY=127.0.0.1:7   # (note how display 7 = port 5907)"
	echo " DISKBUS=ide               # (change to 'virtio' or 'scsi' if supported by guest)"
	echo " CDROM=''                  # name a file to boot as CD-ROM in IDE drive 4 of 4"
	echo " QQEMU_CUSTOM=''           # custom arguments to pass to qemu"
	echo ""
	echo "Prepend environment variables like this to launch with custom values:"
	echo " MEMORY=4096 KVM=yes qqemu DISK"
	echo
	exit 0
fi

memory=${MEMORY:-1024}
vnc_display=${VNC_DISPLAY:-"127.0.0.1:7"}
drive_type=${DISKBUS:-"ide"} # virtio-blk-pci
bios=${BIOS:-"legacy"}

# TODO: detect KVM availability
if [ "${KVM:-"yes"}" = "yes" ]; then
	enable_kvm="-enable-kvm"
	accel_kvm=",accel=kvm"
else
	enable_kvm=""
	accel_kvm=""
fi

if [ "$bios" = "legacy" ]
then
	bios_cmd=""
else
	bios_cmd=" -bios /usr/share/ovmf/OVMF.fd"
fi

# initialize virtual disk list
if [ "$drive_type" = "scsi" ]
then
	vdisk_cmd="-device lsi,id=scsi0,addr=0x9 -device lsi,id=scsi1,addr=0x10"
else
	vdisk_cmd=""
fi

vdisk_idx0=0
vdisk_idx1=1
for vdisk in "$@"
do
	if [ ! -e "$vdisk" ]
	then
		vdisk="/dev/$vdisk"
	fi
	if [ ! -e "$vdisk" ]
	then
		echo "Disk does not exist: $vdisk"
		exit 1
	fi
	if [ "$drive_type" = "virtio" ]
	then
		pci_dev=$((vdisk_idx0 + 9))
		vdisk_cmd="$vdisk_cmd \
			-drive file=${vdisk},format=raw,if=none,id=drive-disk${vdisk_idx0},snapshot=on \
			-device virtio-blk-pci,scsi=off,bus=pci.0,addr=${pci_dev},drive=drive-disk${vdisk_idx0},id=virtio-disk${vdisk_idx0},bootindex=${vdisk_idx1} \
		"
	elif [ "$drive_type" = "scsi" ]
	then
		scsi_bus=$((vdisk_idx0/7))
		vdisk_cmd="$vdisk_cmd \
			-drive file=${vdisk},format=raw,if=none,id=drive-disk${vdisk_idx0},snapshot=on \
			-device scsi-hd,bus=scsi${scsi_bus}.0,drive=drive-disk${vdisk_idx0},id=scsi-disk${vdisk_idx0},bootindex=${vdisk_idx1} \
		"
	else
		ide_bus=$((vdisk_idx0/2))
		ide_drive=$((vdisk_idx0%2))
		vdisk_cmd="$vdisk_cmd \
			-drive file=${vdisk},format=raw,if=none,id=drive-disk${vdisk_idx0},snapshot=on \
			-device ide-hd,bus=ide.${ide_bus},unit=${ide_drive},drive=drive-disk${vdisk_idx0},id=ide${ide_bus}-0-${ide_drive},bootindex=${vdisk_idx1} \
		"
	fi
	((vdisk_idx0++)) || true
	((vdisk_idx1++)) || true
done

if [ "${DISPLAY:-""}" != "" ]
then
	# NOTE: gtk was unstable in vbox + debian 12 + kde, using good 'ol sdl
	display_cmd2="-display sdl"
else
	display_cmd2=""
fi

if [ "${CDROM:-""}" != "" ]
then
	if [ ! -e "$CDROM" ]
	then
		CDROM="/dev/$CDROM"
	fi
	if [ ! -e "$CDROM" ]
	then
		echo "CDROM does not exist: $CDROM"
		exit 1
	fi
	cdrom="\
	-drive file=${CDROM},format=raw,if=none,id=drive-cdrom,media=cdrom,snapshot=on \
	-device ide-cd,bus=ide.1,unit=1,drive=drive-cdrom,id=ide1-1-1,bootindex=0 \
	-boot d \
	"
else
	cdrom=""
fi

if [ "${NET:-"no"}" = "yes" ]
then
	# clone first mac address of the host
	macaddr=",macaddr=$(ip link | awk '/ether/ {print $2; exit}')" \
	|| macaddr=""
	net_cmd="-net user -net nic,addr=0x3,model=e1000${macaddr}"
else
	net_cmd=""
fi

if [ "${QQEMU_CUSTOM:-""}" != "" ]
then
	# clone first mac address of the host
	custom_cmd="$QQEMU_CUSTOM"
else
	custom_cmd=""
fi

# pass half the cpu core count to guest by default
if [ "${CPU:-""}" = "" ]
then
	cpu_cnt=$(nproc)
	((cpu_cnt=(cpu_cnt+1)/2))
	cpu_cnt=1
else
	cpu_cnt=$CPU
fi

# for modifications to be visible to the started guest on subsequent reboots,
# sync and cache clear is necessary
sync
echo 1 > /proc/sys/vm/drop_caches

echo "Launching virtual machine with snapshotted disks"
echo "VNC Display is: ${vnc_display}"
echo "VM will start suspended, type 'c' in CLI monitor to boot, 'q' to turn off"
qemu-system-x86_64 \
	${enable_kvm} \
	-name demoboot \
	-S \
	-machine pc-i440fx-2.1${accel_kvm},usb=off \
	-cpu qemu64 \
	-smp sockets=1,dies=1,cores=$cpu_cnt,threads=1 \
	-m ${memory} \
	${bios_cmd} \
	-overcommit mem-lock=off \
	-no-user-config \
	-nodefaults \
	-monitor stdio \
	-rtc base=utc,driftfix=slew \
	-global kvm-pit.lost_tick_policy=discard \
	-no-hpet \
	-no-shutdown \
	-global PIIX4_PM.disable_s3=1 \
	-global PIIX4_PM.disable_s4=1 \
	-boot menu=on,strict=on \
	${cdrom} \
	${vdisk_cmd} \
	-device ich9-usb-ehci1,id=usb,bus=pci.0,addr=0x5.0x7 \
	-device ich9-usb-uhci1,masterbus=usb.0,firstport=0,bus=pci.0,multifunction=on,addr=0x5 \
	-device ich9-usb-uhci2,masterbus=usb.0,firstport=2,bus=pci.0,addr=0x5.0x1 \
	-device ich9-usb-uhci3,masterbus=usb.0,firstport=4,bus=pci.0,addr=0x5.0x2 \
	-device usb-tablet,id=input0 \
	-vnc ${vnc_display},non-adaptive=on \
	${display_cmd2} \
	${keyboard} \
	-device qxl-vga,id=video0,ram_size=67108864,vram_size=67108864,bus=pci.0,addr=0x2 \
	-device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x8 \
	${net_cmd} \
	${custom_cmd} \
	-msg timestamp=on \
	;

exit
}
